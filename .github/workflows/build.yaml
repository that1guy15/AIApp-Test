name: CI/CD

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-west-2 # update this to your AWS region
  ECR_REPOSITORY: my-ecr-repo # update this to your ECR repository name
  K8S_NAMESPACE: default # update this to your Kubernetes namespace

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pylint black
        if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi

    - name: Lint with flake8
      run: |
        cd backend
        flake8 . --exit-zero --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --exit-zero --count --max-complexity=10 --max-line-length=127 --statistics

    - name: Lint with pylint
      run: |
        cd backend
        pylint --disable=R,C .

    - name: Format with Black
      run: |
        cd backend
        black --check .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA

    - name: Run tests
      run: |
        cd backend
        python -m unittest discover tests

    - name: Deploy to EKS
      run: |
        kubectl set image deployment/my-app my-app=$ECR_REGISTRY/$ECR_REPOSITORY:$GITHUB_SHA -n $K8S_NAMESPACE
        kubectl rollout status deployment/my-app -n $K8S_NAMESPACE
